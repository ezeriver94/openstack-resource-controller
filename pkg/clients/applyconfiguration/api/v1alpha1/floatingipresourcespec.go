/*
Copyright 2024 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/k-orc/openstack-resource-controller/v2/api/v1alpha1"
)

// FloatingIPResourceSpecApplyConfiguration represents a declarative configuration of the FloatingIPResourceSpec type for use
// with apply.
type FloatingIPResourceSpecApplyConfiguration struct {
	Name        *apiv1alpha1.OpenStackName      `json:"name,omitempty"`
	Description *apiv1alpha1.NeutronDescription `json:"description,omitempty"`
	Tags        []apiv1alpha1.NeutronTag        `json:"tags,omitempty"`
	NetworkRef  *apiv1alpha1.KubernetesNameRef  `json:"networkRef,omitempty"`
	SubnetRef   *apiv1alpha1.KubernetesNameRef  `json:"subnetRef,omitempty"`
	FloatingIP  *string                         `json:"floatingIP,omitempty"`
	PortID      *string                         `json:"portID,omitempty"`
	FixedIP     *apiv1alpha1.IPvAny             `json:"fixedIP,omitempty"`
}

// FloatingIPResourceSpecApplyConfiguration constructs a declarative configuration of the FloatingIPResourceSpec type for use with
// apply.
func FloatingIPResourceSpec() *FloatingIPResourceSpecApplyConfiguration {
	return &FloatingIPResourceSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *FloatingIPResourceSpecApplyConfiguration) WithName(value apiv1alpha1.OpenStackName) *FloatingIPResourceSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *FloatingIPResourceSpecApplyConfiguration) WithDescription(value apiv1alpha1.NeutronDescription) *FloatingIPResourceSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *FloatingIPResourceSpecApplyConfiguration) WithTags(values ...apiv1alpha1.NeutronTag) *FloatingIPResourceSpecApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// WithNetworkRef sets the NetworkRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkRef field is set to the value of the last call.
func (b *FloatingIPResourceSpecApplyConfiguration) WithNetworkRef(value apiv1alpha1.KubernetesNameRef) *FloatingIPResourceSpecApplyConfiguration {
	b.NetworkRef = &value
	return b
}

// WithSubnetRef sets the SubnetRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SubnetRef field is set to the value of the last call.
func (b *FloatingIPResourceSpecApplyConfiguration) WithSubnetRef(value apiv1alpha1.KubernetesNameRef) *FloatingIPResourceSpecApplyConfiguration {
	b.SubnetRef = &value
	return b
}

// WithFloatingIP sets the FloatingIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FloatingIP field is set to the value of the last call.
func (b *FloatingIPResourceSpecApplyConfiguration) WithFloatingIP(value string) *FloatingIPResourceSpecApplyConfiguration {
	b.FloatingIP = &value
	return b
}

// WithPortID sets the PortID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortID field is set to the value of the last call.
func (b *FloatingIPResourceSpecApplyConfiguration) WithPortID(value string) *FloatingIPResourceSpecApplyConfiguration {
	b.PortID = &value
	return b
}

// WithFixedIP sets the FixedIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FixedIP field is set to the value of the last call.
func (b *FloatingIPResourceSpecApplyConfiguration) WithFixedIP(value apiv1alpha1.IPvAny) *FloatingIPResourceSpecApplyConfiguration {
	b.FixedIP = &value
	return b
}
